services:
  postgres:
    image: postgres:16-alpine
    container_name: postgres-prod
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-authdb}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./deployment/postgres-backup:/backup
    restart: unless-stopped
    networks:
      - app-network
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:7-alpine
    container_name: redis-prod
    restart: unless-stopped
    networks:
      - app-network
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  email-service:
    image: rishichirchi/email-service:latest
    container_name: email-service-prod
    environment:
      - BREVO_API_KEY=${BREVO_API_KEY}
      - BREVO_SENDER_EMAIL=${BREVO_SENDER_EMAIL}
      - BREVO_SENDER_NAME=${BREVO_SENDER_NAME}
      - VERIFICATION_URL=${VERIFICATION_URL}
    restart: unless-stopped
    networks:
      - app-network
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  auth-service:
    image: rishichirchi/auth-service:latest
    container_name: auth-service-prod
    environment:
      - QUARKUS_HTTP_HOST=0.0.0.0
      - QUARKUS_HTTP_PORT=8080
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=${POSTGRES_DB:-authdb}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - EMAIL_SERVICE_URL=http://email-service:8000
    depends_on:
      postgres:
        condition: service_healthy
      email-service:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - app-network
    ports:
      - "8080:8080"
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  session-server:
    image: rishichirchi/session-server:latest
    container_name: session-server-prod
    environment:
      - NODE_ENV=production
      - PORT=3001
      - BACKEND_URL=http://auth-service:8080
      - FRONTEND_URL=${FRONTEND_URL}
      - SESSION_SECRET=${SESSION_SECRET}
    depends_on:
      - auth-service
    restart: unless-stopped
    networks:
      - app-network
    ports:
      - "3001:3001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  frontend:
    image: rishichirchi/frontend:latest
    container_name: frontend-prod
    environment:
      - REACT_APP_API_URL=/api
      - GENERATE_SOURCEMAP=false
    depends_on:
      - session-server
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  nginx:
    image: nginx:alpine
    container_name: nginx-prod
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./deployment/nginx/ssl:/etc/ssl/certs:ro
      - ./deployment/nginx/logs:/var/log/nginx
    depends_on:
      - frontend
      - session-server
    restart: unless-stopped
    networks:
      - app-network
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  app-network:
    driver: bridge
